package com.knewone.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.knewone.dao.Things;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table THINGS.
*/
public class ThingsDao extends AbstractDao<Things, Long> {

    public static final String TABLENAME = "THINGS";

    /**
     * Properties of entity Things.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Thingsid = new Property(1, String.class, "thingsid", false, "THINGSID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Subtitle = new Property(3, String.class, "subtitle", false, "SUBTITLE");
        public final static Property Cover_url = new Property(4, String.class, "cover_url", false, "COVER_URL");
        public final static Property Fanciers_count = new Property(5, String.class, "fanciers_count", false, "FANCIERS_COUNT");
        public final static Property Author_avatar = new Property(6, String.class, "author_avatar", false, "AUTHOR_AVATAR");
        public final static Property Author_name = new Property(7, String.class, "author_name", false, "AUTHOR_NAME");
        public final static Property Author_id = new Property(8, String.class, "author_id", false, "AUTHOR_ID");
    };


    public ThingsDao(DaoConfig config) {
        super(config);
    }
    
    public ThingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'THINGS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'THINGSID' TEXT," + // 1: thingsid
                "'TITLE' TEXT," + // 2: title
                "'SUBTITLE' TEXT," + // 3: subtitle
                "'COVER_URL' TEXT," + // 4: cover_url
                "'FANCIERS_COUNT' TEXT," + // 5: fanciers_count
                "'AUTHOR_AVATAR' TEXT," + // 6: author_avatar
                "'AUTHOR_NAME' TEXT," + // 7: author_name
                "'AUTHOR_ID' TEXT);"); // 8: author_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THINGS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Things entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String thingsid = entity.getThingsid();
        if (thingsid != null) {
            stmt.bindString(2, thingsid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(4, subtitle);
        }
 
        String cover_url = entity.getCover_url();
        if (cover_url != null) {
            stmt.bindString(5, cover_url);
        }
 
        String fanciers_count = entity.getFanciers_count();
        if (fanciers_count != null) {
            stmt.bindString(6, fanciers_count);
        }
 
        String author_avatar = entity.getAuthor_avatar();
        if (author_avatar != null) {
            stmt.bindString(7, author_avatar);
        }
 
        String author_name = entity.getAuthor_name();
        if (author_name != null) {
            stmt.bindString(8, author_name);
        }
 
        String author_id = entity.getAuthor_id();
        if (author_id != null) {
            stmt.bindString(9, author_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Things readEntity(Cursor cursor, int offset) {
        Things entity = new Things( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // thingsid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subtitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fanciers_count
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // author_avatar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // author_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // author_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Things entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setThingsid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubtitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFanciers_count(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAuthor_avatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAuthor_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAuthor_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Things entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Things entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
